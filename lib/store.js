// Generated by CoffeeScript 1.6.3
(function() {
  var ResourceMethods, ResourceSchema, Store, async, mongoose, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  mongoose = require('mongoose');

  _ = require('underscore');

  async = require('async');

  ResourceSchema = require('./schemas/resource-schema');

  ResourceMethods = require('./methods/resource-methods');

  module.exports = Store = (function() {
    function Store(settings) {
      this.settings = settings != null ? settings : {};
      this.ensureIndexes = __bind(this.ensureIndexes, this);
      _.defaults(this.settings, {});
      this.models = {
        Resource: mongoose.model("Resource", ResourceSchema)
      };
      this.resources = new ResourceMethods(this.models);
    }

    Store.prototype.ensureIndexes = function(cb) {
      var k, model, stuff, _ref,
        _this = this;
      stuff = [];
      _ref = this.models;
      for (k in _ref) {
        model = _ref[k];
        stuff.push(function(cb) {
          return model.ensureIndexes(function(err) {
            if (err) {
              winston.error("Ensuring index for " + model.modelName + " - ERROR " + err);
            }
            return cb(null);
          });
        });
      }
      return async.series(stuff, cb);
    };

    return Store;

  })();

}).call(this);
