// Generated by CoffeeScript 1.6.2
(function() {
  var ObjectId, PageResult, PageResultInfinite, ResourceMethods, errors, mongoose, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore-ext');

  PageResult = require('simple-paginator').PageResult;

  PageResultInfinite = require('simple-paginator').PageResultInfinite;

  errors = require('some-errors');

  mongoose = require("mongoose");

  ObjectId = mongoose.Types.ObjectId;

  /*
  Provides methods to interact with resources.
  */


  module.exports = ResourceMethods = (function() {
    var CREATE_FIELDS, UPDATE_FIELDS;

    CREATE_FIELDS = ['_id', 'title', 'url', 'description', 'createdBy', 'tags'];

    UPDATE_FIELDS = ['title', 'url', 'description', 'createdBy', 'tags'];

    /*
    Initializes a new instance of the @see ResourceMethods class.
    @param {Object} models A collection of models that can be used.
    */


    /*
    Initializes a new instance of the @see ResourceMethods class.
    @param {Object} models A collection of models that can be used.
    */


    function ResourceMethods(models) {
      this.models = models;
      this._getItem = __bind(this._getItem, this);
      this.put = __bind(this.put, this);
      this.patch = __bind(this.patch, this);
      this.destroy = __bind(this.destroy, this);
      this.create = __bind(this.create, this);
      this.get = __bind(this.get, this);
      this.all = __bind(this.all, this);
    }

    ResourceMethods.prototype.all = function(options, cb) {
      var _this = this;

      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.models.Resource.count({}, function(err, totalCount) {
        var query;

        if (err) {
          return cb(err);
        }
        options.offset || (options.offset = 0);
        options.count || (options.count = 100);
        query = _this.models.Resource.find({});
        if (options.select && options.select.length > 0) {
          query.select(options.select);
        }
        if (options.count || options.offset) {
          query.setOptions({
            skip: options.offset,
            limit: options.count
          });
        }
        return query.exec(function(err, items) {
          if (err) {
            return cb(err);
          }
          return cb(null, new PageResult(items || [], totalCount, options.offset, options.count));
        });
      });
    };

    /*
    Retrieve a single resource-item through it's id
    */


    ResourceMethods.prototype.get = function(resourceId, options, cb) {
      var query;

      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      resourceId = new ObjectId(resourceId.toString());
      query = this.models.Resource.findOne({
        _id: resourceId
      });
      if (options.select && options.select.length > 0) {
        query = query.select(options.select);
      }
      return query.exec(cb);
    };

    /*
    Create a new resource
    */


    ResourceMethods.prototype.create = function(objs, actor, cb) {
      var data, model,
        _this = this;

      if (objs == null) {
        objs = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      data = {};
      data.createdBy = actor;
      if (objs.tags && _.isString(objs.tags)) {
        objs.tags = objs.states.split(',');
      }
      _.extendFiltered(data, CREATE_FIELDS, objs);
      model = new this.models.Resource(data);
      return model.save(function(err) {
        if (err) {
          return cb(err);
        }
        return cb(null, model, true);
      });
    };

    ResourceMethods.prototype.destroy = function(resourceId, options, cb) {
      var _this = this;

      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this._getItem(resourceId, function(err, item) {
        if (err) {
          return cb(err);
        }
        if (!item) {
          return cb(null);
        }
        return item.remove(function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null);
        });
      });
    };

    ResourceMethods.prototype.patch = function(resourceId, obj, options, cb) {
      var _this = this;

      if (obj == null) {
        obj = {};
      }
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this._getItem(resourceId, function(err, item) {
        if (err) {
          return cb(err);
        }
        if (!item) {
          return cb(new errors.NotFound("/resources/" + resourceId));
        }
        if (obj.states && _.isString(obj.states)) {
          obj.states = obj.states.split(',');
        }
        if (obj.captions && _.isString(obj.captions)) {
          obj.captions = obj.captions.split(',');
        }
        _.extendFiltered(item, UPDATE_FIELDS, obj);
        return item.save(function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null, item);
        });
      });
    };

    ResourceMethods.prototype.put = function(resourceId, obj, options, cb) {
      var _this = this;

      if (obj == null) {
        obj = {};
      }
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this._getItem(resourceId, function(err, item) {
        var field, _i, _len;

        if (err) {
          return cb(err);
        }
        if (!item) {
          return cb(new errors.NotFound("/resources/" + resourceId));
        }
        if (obj.states && _.isString(obj.states)) {
          obj.states = obj.states.split(',');
        }
        if (obj.captions && _.isString(obj.captions)) {
          obj.captions = obj.captions.split(',');
        }
        for (_i = 0, _len = UPDATE_FIELDS.length; _i < _len; _i++) {
          field = UPDATE_FIELDS[_i];
          item[field] = null;
        }
        _.extendFiltered(item, UPDATE_FIELDS, obj);
        return item.save(function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null, item);
        });
      });
    };

    ResourceMethods.prototype._getItem = function(resourceId, cb) {
      resourceId = new ObjectId(resourceId.toString());
      return this.models.Resource.findOne({
        _id: resourceId
      }, cb);
    };

    return ResourceMethods;

  })();

}).call(this);
